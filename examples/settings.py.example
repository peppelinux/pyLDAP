import ldap3

# GLOBALS

# encoding
ldap3.set_config_parameter('DEFAULT_SERVER_ENCODING',
                           'UTF-8')
# some broken LDAP implementation may have different encoding
# than those expected by RFCs
# ldap3.set_config_paramenter('ADDITIONAL_ENCODINGS', ...)

# timeouts
ldap3.set_config_parameter('RESTARTABLE_TRIES', 1)
ldap3.set_config_parameter('POOLING_LOOP_TIMEOUT', 1)
ldap3.set_config_parameter('RESET_AVAILABILITY_TIMEOUT', 1)
ldap3.set_config_parameter('RESTARTABLE_SLEEPTIME', 1)


_REWRITE_DN_TO = 'dc=proxy,dc=testunical,dc=it'

DEFAULT = dict(server =
                   dict(host = 'ldaps://thathost.unical.it',
                        connect_timeout = 5,
                        # TLS...
                        ),
               connection =
                   dict(user = 'cn=thatusername,dc=unical,dc=it',
                        password = 'thatpassword',
                        read_only = True,
                        version = 3,
                        # see ldap3 client_strategies
                        client_strategy = ldap3.RESTARTABLE,
                        auto_bind = True,
                        pool_size = 10,
                        pool_keepalive = 10),
                search =
                    dict(search_base = 'ou=people,dc=unical,dc=it',
                         search_filter = '(objectclass=person)',
                         search_scope = ldap3.SUBTREE,

                         # general purpose for huge resultsets
                         # TODO: implement paged resultset, see: examples/paged_resultset.py
                         # size_limit = 500,
                         # paged_size = 1000, # up to 500000 results
                         # paged_criticality = True, # check if the server supports paged results
                         # paged_cookie = True, # must be sent back while requesting subsequent entries

                         # to get all = # '*'
                         attributes = ['eduPersonPrincipalName',
                                       'schacHomeOrganization',
                                       'mail',
                                       'uid',
                                       'givenName',
                                       'sn',
                                       'eduPersonScopedAffiliation',
                                       'schacPersonalUniqueId',
                                       'schacPersonalUniqueCode'
                                       ]

                        ),
                    encoding = 'utf-8',
                  rewrite_rules =
                        [{'package': 'multildap.attr_rewrite',
                         'name': 'replace',
                         'kwargs': {'from_str': 'unical', 'to_str': 'lacinu',}},

                          {'package': 'multildap.attr_rewrite',
                          'name': 'regexp_replace',
                          'kwargs': {'regexp': 'unical', 'sub': 'gnocc',}},

                          {'package': 'multildap.attr_rewrite',
                          'name': 'add_static_attribute',
                          'kwargs': {'name': 'eduPersonOrcid', 'value': 'ingoalla',}},

                          {'package': 'multildap.attr_rewrite',
                          'name': 'copy_attribute_value',
                          'kwargs': {'from_attr': 'uid',
                                     'to_attr': 'schacPersonalUniqueID',
                                     'suffix': '',
                                     'prefix': 'urn:schac:personalUniqueID:IT:CF:',
                                     }},
                        ],
                  
                  # Authentication settings
                  rewrite_dn_to = _REWRITE_DN_TO,
                  allow_authentication = True,
            )

LDAPTEST = dict(server =
                   dict(host = 'ldap://ldap.testunical.it:389',
                        connect_timeout = 5,
                        # TLS...
                        ),
               connection =
                   dict(user = 'cn=idp1,ou=idp,dc=testunical,dc=it',
                        password = 'idp1',
                        read_only = True,
                        version = 3,
                        # see ldap3 client_strategies
                        client_strategy = ldap3.RESTARTABLE,
                        auto_bind = True,
                        pool_size = 10,
                        pool_keepalive = 10),
                search =
                    dict(search_base = 'ou=people,dc=testunical,dc=it',
                         search_filter = '(objectclass=person)',
                         search_scope = ldap3.SUBTREE,

                         # general purpose for huge resultsets
                         # TODO: implement paged resultset, see: examples/paged_resultset.py
                         # size_limit = 500,
                         # paged_size = 1000, # up to 500000 results
                         # paged_criticality = True, # check if the server supports paged results
                         # paged_cookie = True, # must be sent back while requesting subsequent entries

                         # to get all = # '*'
                         attributes = ['eduPersonPrincipalName',
                                       'schacHomeOrganization',
                                       'mail',
                                       'uid',
                                       'givenName',
                                       'sn',
                                       'eduPersonScopedAffiliation',
                                       'schacPersonalUniqueId',
                                       'schacPersonalUniqueCode'
                                       ]

                        ),
                  encoding = 'utf-8',
                  rewrite_rules =
                        [{'package': 'multildap.attr_rewrite',
                         'name': 'replace',
                         'kwargs': {'from_str': 'testunical', 'to_str': 'unical',}},

                         {'package': 'multildap.attr_rewrite',
                          'name': 'regexp_replace',
                          'kwargs': {'regexp': '', 'sub': '',}},

                        ],
                  rewrite_dn_to = _REWRITE_DN_TO,
            )

# put multiple connections here
LDAP_CONNECTIONS = {'DEFAULT' : DEFAULT,
                    'LDAPTEST' : LDAPTEST}
